# Variables
variables:
# Name of the service connection
- name: sc_name
  value: 'sc-mg-coffeetimedev'
# ID of the subscription for the tfstate
- name: backend_subscription_id
  value: 'b34b291e-89b2-4d63-9f9c-1ac3e8f43b4f'
# Storage account to store the tfstate
- name: stg_name
  value: 'stterraformkprintz'
# RG name for the storage account to store the tfstate
- name: stg_rg_name
  value: 'rg-mgmt'
# Name of the container to store the tfstate
- name: stg_container_name
  value: 'terraform'

# Parameters
parameters:
# ID of the subscription for the deployment
- name: depl_subscription_id
  type: string 

# Use the a specific runner
pool: azure-vm

# Stages
stages:
# Deploy the server
- stage: Plan
  jobs:
  - job: Plan
    steps:
      # Checkout the repositories
      - checkout: self
        path: s/az-server
      - checkout: az-pipeline-template-tf-ansible

      # Init Terraform backend and download providers
      - task: TerraformCLI@0
        displayName: Terraform init
        inputs:
          workingDirectory: ./az-server/terraform
          command: init
          # Configure the backend to store the .tfstate file
          backendType: azurerm
          backendServiceArm: '${{ variables.sc_name }}'
          backendAzureRmSubscriptionId: '${{ variables.backend_subscription_id }}'
          backendAzureRmResourceGroupName: '${{ variables.stg_rg_name }}'
          backendAzureRmStorageAccountName: '${{ variables.stg_name }}'
          backendAzureRmContainerName: '${{ variables.stg_container_name }}'
          backendAzureRmKey: '$(System.TeamProject)/$(Build.Repository.Name).tfstate'

      # Plan Terraform ressources
      - task: TerraformCLI@0
        displayName: Terraform plan
        inputs:
          workingDirectory: ./az-server/terraform
          command: plan
          environmentServiceName: '${{ variables.sc_name }}'
          providerAzureRmSubscriptionId: '${{ parameters.depl_subscription_id }}'

- stage: Deploy
  jobs:
  - job: Deploy
    steps:
      # Checkout the repositories
      - checkout: self
        path: s/az-server
      - checkout: az-pipeline-template-tf-ansible

      # Init Terraform backend and download providers
      - task: TerraformCLI@0
        displayName: Terraform init
        inputs:
          workingDirectory: ./az-server/terraform
          command: init
          # Configure the backend to store the .tfstate file
          backendType: azurerm
          backendServiceArm: '${{ variables.sc_name }}'
          backendAzureRmSubscriptionId: '${{ variables.backend_subscription_id }}'
          backendAzureRmResourceGroupName: '${{ variables.stg_rg_name }}'
          backendAzureRmStorageAccountName: '${{ variables.stg_name }}'
          backendAzureRmContainerName: '${{ variables.stg_container_name }}'
          backendAzureRmKey: '$(System.TeamProject)/$(Build.Repository.Name).tfstate'

      # Plan Terraform ressources
      - task: TerraformCLI@0
        displayName: Terraform apply
        inputs:
          workingDirectory: ./az-server/terraform
          command: apply
          environmentServiceName: '${{ variables.sc_name }}'
          providerAzureRmSubscriptionId: '${{ parameters.depl_subscription_id }}'
